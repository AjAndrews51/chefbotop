let tmi,CHANNEL_NAME,OAUTH_TOKEN,BOT_USERNAME,rolldie;_b24‍.w("tmi.js",[["default",["tmi"],function(v){tmi=v}]]);_b24‍.w("./constants",[["CHANNEL_NAME",["CHANNEL_NAME"],function(v){CHANNEL_NAME=v}],["OAUTH_TOKEN",["OAUTH_TOKEN"],function(v){OAUTH_TOKEN=v}],["BOT_USERNAME",["BOT_USERNAME"],function(v){BOT_USERNAME=v}]]);_b24‍.w("./variables",[["rolldie",["rolldie"],function(v){rolldie=v}]]);console.log('app started');






//import fetch  from "node-fetch";

var wincounter = 0;
var losscounter = 0;
var w = 1;
var l = 1;


const client = new tmi.Client({
	options: { debug: true, messagesLogLevel: "info" },
	connection: {
		reconnect: true,
		secure: true
	},
	identity: {
		username: CHANNEL_NAME,
		password: OAUTH_TOKEN
	},
	channels: [ CHANNEL_NAME ]
});

function onConnectedHandler (addr, port) {
	console.log(`* Connected to ${addr}:${port}`);
  };

client.on('message', onMessageHandler);
client.on('connected', onConnectedHandler);

// Connect to Twitch:
client.connect();
console.log('debugg line 35');

/*basic commands */
function onMessageHandler (target, context, msg, self) {
	if (self) { return; } // Ignore messages from the bot
  
	// Remove whitespace from chat message
	const commandName = msg.trim();
	if (commandName === '!d20') {
	  const num = rolldie();
	  client.say(target, `You rolled a ${num}`);
	  console.log(`* Executed ${commandName} command`);
	} else {
	  console.log(`* Unknown command ${commandName}`);
	};
console.log('debug line 50');

	/*if (commandName === '!elo') {
		var ranks;
var id;

const api_key = 'RGAPI-45175915-74cd-493c-b78b-50b5741496a3';
let names = ['ChefAJ', 'Chef Arsehole J', 'ChefAjA', 'TheChefAj', 'UwuSenpaiSpankMe', 'AjxBlood', 'ExpansionRectum', 'AjxFear']
for (const name of names){
    var get_id = fetch('https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/' + name + '?api_key=' + api_key).then(data =>{return data.json()}).then(data => id = data).then(() => {
        var this_name = id.id
        var rank_data = fetch('https://na1.api.riotgames.com/lol/league/v4/entries/by-summoner/' + this_name +'?api_key=' + api_key).then(data =>{return data.json()}).then(data => ranks = data).then(() => {
            if(ranks.length > 0){
                var tier = ranks[0].tier;
                var rank = ranks[0].rank;
                var LP = ranks[0].leaguePoints;
                client.say(target, name + ' is ' + tier + ' - ' + rank + ' ' + LP +' LP');
            }
            else{
                client.say(target, name + ' is unranked');
            }
            
        });
    });
}*/

//win loss counter crap!
if (commandName === '!win') {
	var wins = wincounter
	client.say(target, 'Added 1 win! Poggers!');
    _b24‍.g.console.log(wincounter = parseInt(wincounter) + 1);
};
if (commandName === '!loss') {
    _b24‍.g.console.log(losscounter = parseInt(losscounter) + 1);
	client.say(target, 'Added 1 loss! Fuck!')
};
if (commandName === '!reset') {
    console.log('reset');
	client.say(target, 'Reset win loss counter')
	wincounter = 0;
	losscounter = 0;
	_b24‍.g.console.log(wincounter,losscounter)
};
if (commandName === '!wl') {
	_b24‍.g.console.log(wincounter, '-' ,losscounter)
	client.say(target, wincounter + '-' + losscounter)
};

  

/* point system and point system commands */

/*gambling commands for point system*/

/* League Commands, Ranks, queue up for norms/customes etc*/

 

/*timed messages*/

/*bot ban call lines*/

/*music*/
var SpotifyWebApi = require('../');

/**
 * This example uses the Client Credentials authorization flow. 
 */

/**
 * Get the credentials from Spotify's Dashboard page.
 * https://developer.spotify.com/dashboard/applications
 */
const spotifyApi = new SpotifyWebApi({
  clientId: '6fcba4d088e6481d81e4d2e6ab03d0cd',
  clientSecret: '4509e25b62804060876cfd97dc9eaf02'
});

// Retrieve an access token using your credentials
spotifyApi.clientCredentialsGrant().
    then(function(result) {
        _b24‍.g.console.log('It worked! Your access token is: ' + result.body.access_token); 
    }).catch(function(err) {
        _b24‍.g.console.log('If this is printed, it probably means that you used invalid ' +
        'clientId and clientSecret values. Please check!');
        console.log('Hint: ');
        _b24‍.g.console.log(err);

        const SpotifyWebApi = require('../');

/**
 * This example refreshes an access token. Refreshing access tokens is only possible access tokens received using the
 * Authorization Code flow, documented here: https://developer.spotify.com/spotify-web-api/authorization-guide/#authorization_code_flow
 */

/* Retrieve an authorization code as documented here:
 * https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow
 * or in the Authorization section of the README.
 *
 * Codes are given for a set of scopes. For this example, the scopes are user-read-private and user-read-email.
 * Scopes are documented here:
 * https://developer.spotify.com/documentation/general/guides/scopes/
 */
const authorizationCode =
  '<insert authorization code with user-read-private and user-read-email scopes>';

/**
 * Get the credentials from Spotify's Dashboard page.
 * https://developer.spotify.com/dashboard/applications
 */
const spotifyApi = new SpotifyWebApi({
  clientId: '6fcba4d088e6481d81e4d2e6ab03d0cd',
  clientSecret: '4509e25b62804060876cfd97dc9eaf02',
  redirectUri: 'https://getyourspotifyrefreshtoken.herokuapp.com/callback'
});

// When our access token will expire
let tokenExpirationEpoch;

// First retrieve an access token
spotifyApi.authorizationCodeGrant(authorizationCode).then(
  function(data) {
    // Set the access token and refresh token
    spotifyApi.setAccessToken(data.body['BQCe5EKqidkoNGlUhUtRJ3zMMQOMnPEiEnhcrB_U9KE2HrsEaYw4h1JoGe9MC_zHLkpJ5yaVcvTQ61AyuMNKbWiEWRyKz-itvtHTIpu_-qQc2ejrXG_cbK2OOCh5kESzLl5nurBDLFqv4nkN9XknK9kduy5ooNFc6R43dcU5Il55LLtXPnzxmoWXlqVnRJjEd8Uxqqbfgt3wB7ZY_yYSkKEZKjWKFoTW3iWM5wdJR7vTWNm0mVgdep1lUTWAHF3h5j_E9wEihPF0pRJPYx28CNUzVg']);
    spotifyApi.setRefreshToken(data.body['AQDYNW_RodvUs00yEQThT75C2t-AxMwSF_0YBoTXw3_6WOBTMyQwsaTrDXO2Eggy1hVlOCHGIuC041qRMYRRrdLohFjgR4ljmLz-XrYZjyowmd6irCtxdgHxsVgN40S3Rvs']);

    // Save the amount of seconds until the access token expired
    tokenExpirationEpoch =
      new Date().getTime() / 1000 + data.body['expires_in'];
    _b24‍.g.console.log(
      'Retrieved token. It expires in ' +
        Math.floor(tokenExpirationEpoch - new Date().getTime() / 1000) +
        ' seconds!'
    );
  },
  function(err) {
    _b24‍.g.console.log(
      'Something went wrong when retrieving the access token!',
      err.message
    );
  }
);

// Continually print out the time left until the token expires..
let numberOfTimesUpdated = 0;

setInterval(function() {
  _b24‍.g.console.log(
    'Time left: ' +
      Math.floor(tokenExpirationEpoch - new Date().getTime() / 1000) +
      ' seconds left!'
  );

  // OK, we need to refresh the token. Stop printing and refresh.
  if (++numberOfTimesUpdated > 5) {
    clearInterval(this);

    // Refresh token and print the new time to expiration.
    spotifyApi.refreshAccessToken().then(
      function(data) {
        tokenExpirationEpoch =
          new Date().getTime() / 1000 + data.body['expires_in'];
        _b24‍.g.console.log(
          'Refreshed token. It now expires in ' +
            Math.floor(tokenExpirationEpoch - new Date().getTime() / 1000) +
            ' seconds!'
        );
      },
      function(err) {
        _b24‍.g.console.log('Could not refresh the token!', err.message);
      }
    );
  }
}, 1000);})





if (commandName === '!song'){
	spotifyApi.getMyCurrentPlayingTrack()
	.then(function(data) {
	  _b24‍.g.console.log('Now playing: ' + data.body.item.name);
	}, function(err) {
	  _b24‍.g.console.log('Something went wrong!', err);
	});


}}
