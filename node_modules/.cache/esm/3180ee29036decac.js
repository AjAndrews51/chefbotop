_036‍.x([["SpotifyWebApi",()=>SpotifyWebApi]]);const { util } = require('prettier');
       var SpotifyWebApi = require('../');

/**
 * This example uses the Client Credentials authorization flow. 
 */

/**
 * Get the credentials from Spotify's Dashboard page.
 * https://developer.spotify.com/dashboard/applications
 */
const spotifyApi = new SpotifyWebApi({
  clientId: '6fcba4d088e6481d81e4d2e6ab03d0cd',
  clientSecret: '4509e25b62804060876cfd97dc9eaf02'
});

// Retrieve an access token using your credentials
spotifyApi.clientCredentialsGrant().
    then(function(result) {
        console.log('It worked! Your access token is: ' + result.body.access_token); 
    }).catch(function(err) {
        console.log('If this is printed, it probably means that you used invalid ' +
        'clientId and clientSecret values. Please check!');
        console.log('Hint: ');
        console.log(err);

        const SpotifyWebApi = require('../');

/**
 * This example refreshes an access token. Refreshing access tokens is only possible access tokens received using the
 * Authorization Code flow, documented here: https://developer.spotify.com/spotify-web-api/authorization-guide/#authorization_code_flow
 */

/* Retrieve an authorization code as documented here:
 * https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow
 * or in the Authorization section of the README.
 *
 * Codes are given for a set of scopes. For this example, the scopes are user-read-private and user-read-email.
 * Scopes are documented here:
 * https://developer.spotify.com/documentation/general/guides/scopes/
 */
const authorizationCode =
  '<insert authorization code with user-read-private and user-read-email scopes>';

/**
 * Get the credentials from Spotify's Dashboard page.
 * https://developer.spotify.com/dashboard/applications
 */
const spotifyApi = new SpotifyWebApi({
  clientId: '6fcba4d088e6481d81e4d2e6ab03d0cd',
  clientSecret: '4509e25b62804060876cfd97dc9eaf02',
  redirectUri: 'https://getyourspotifyrefreshtoken.herokuapp.com/callback'
});

// When our access token will expire
let tokenExpirationEpoch;

// First retrieve an access token
spotifyApi.authorizationCodeGrant(authorizationCode).then(
  function(data) {
    // Set the access token and refresh token
    spotifyApi.setAccessToken(data.body['BQCe5EKqidkoNGlUhUtRJ3zMMQOMnPEiEnhcrB_U9KE2HrsEaYw4h1JoGe9MC_zHLkpJ5yaVcvTQ61AyuMNKbWiEWRyKz-itvtHTIpu_-qQc2ejrXG_cbK2OOCh5kESzLl5nurBDLFqv4nkN9XknK9kduy5ooNFc6R43dcU5Il55LLtXPnzxmoWXlqVnRJjEd8Uxqqbfgt3wB7ZY_yYSkKEZKjWKFoTW3iWM5wdJR7vTWNm0mVgdep1lUTWAHF3h5j_E9wEihPF0pRJPYx28CNUzVg']);
    spotifyApi.setRefreshToken(data.body['AQDYNW_RodvUs00yEQThT75C2t-AxMwSF_0YBoTXw3_6WOBTMyQwsaTrDXO2Eggy1hVlOCHGIuC041qRMYRRrdLohFjgR4ljmLz-XrYZjyowmd6irCtxdgHxsVgN40S3Rvs']);

    // Save the amount of seconds until the access token expired
    tokenExpirationEpoch =
      new Date().getTime() / 1000 + data.body['expires_in'];
    console.log(
      'Retrieved token. It expires in ' +
        Math.floor(tokenExpirationEpoch - new Date().getTime() / 1000) +
        ' seconds!'
    );
  },
  function(err) {
    console.log(
      'Something went wrong when retrieving the access token!',
      err.message
    );
  }
);

// Continually print out the time left until the token expires..
let numberOfTimesUpdated = 0;

setInterval(function() {
  console.log(
    'Time left: ' +
      Math.floor(tokenExpirationEpoch - new Date().getTime() / 1000) +
      ' seconds left!'
  );

  // OK, we need to refresh the token. Stop printing and refresh.
  if (++numberOfTimesUpdated > 5) {
    clearInterval(this);

    // Refresh token and print the new time to expiration.
    spotifyApi.refreshAccessToken().then(
      function(data) {
        tokenExpirationEpoch =
          new Date().getTime() / 1000 + data.body['expires_in'];
        console.log(
          'Refreshed token. It now expires in ' +
            Math.floor(tokenExpirationEpoch - new Date().getTime() / 1000) +
            ' seconds!'
        );
      },
      function(err) {
        console.log('Could not refresh the token!', err.message);
      }
    );
  }
}, 1000);})